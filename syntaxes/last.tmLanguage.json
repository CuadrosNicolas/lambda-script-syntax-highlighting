{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "LambdA ScripT",
	"patterns": [
		{
			"include": "#expression"
		}
	],
	"repository": {
		"operator": {
			"name": "constant.language",
			"patterns": [
				{
					"match": "(\\+|\\-|\\*|\\/|\\<=|\\<|\\>|\\>=|=|&&|\\|\\||\\!=|==|\\:\\:|\\^)",
					"name": "keyword.operator"
				}
			]
		},
		"atom":
		{
					"match": "[a-z][A-Z]*",
					"name": "entity.name.tag"
		},
		"function": {
			"begin": "\\b([A-Z][A-Za-z]*)?(@?\\\\)([A-Z][A-Za-z]*)?((,[A-Z][A-Za-z]*)*)(\\.)",
			"end": ";",
			"beginCaptures": {
				"1": {
					"name": "entity.name.section"
				},
				"2": {
					"name": "constant.language"
				},
				"3": {
					"name": "variable.language."
				},
				"4": {
					"name": "variable.language."
				},
				"5": {
					"name": "variable.language."
				},
				"6": {
					"name": "constant.language"
				}
			},
			"endCaptures": {
				"0": {
					"name": "constant.language"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"parenthese": {
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.open"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.close"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"number": {
			"match": "\\b([0-9]+)\\b",
			"name": "constant.numeric"
		},
		"conditional": {
			"begin": "\\bif\\b",
			"end": "\\bend\\b",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.open"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.close"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"match": "then",
					"name": "punctuation.paren.open"
				},
				{
					"include": "#expression"
				},
				{
					"match": "else",
					"name": "punctuation.paren.open"
				},
				{
					"include": "#expression"
				}
			]
		},
		"String" :
		{
			"match": "\"[A-Za-z ]*\"",
			"name": "constant.character"
		},
		"word": {
			"match": "\\b((?!(match|with|if|then|else|end))[A-Z][a-zA-Z]*)\\b",
			"name": "variable.language"
		},
		"matchexp" :
		{
			"match": "\\b(unify|with|->|\\|)\\b",
			"name": "punctuation.paren.open"
		},
		"expression": {
			"patterns": [
				{
					"include": "#function"
				},
				{
					"include": "#parenthese"
				},
				{
					"include": "#conditional"
				},
				{
					"include": "#matchexp"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#number"
				},
				{
					"include": "#String"
				},
				{
					"include": "#word"
				},
				{
					"include": "#atom"
				}
			]
		}
	},
	"scopeName": "source.last"
}